{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","pageAmount","Math","ceil","pageNumbers","i","push","className","classNames","disabled","href","onClick","map","page","active","items","from","to","numbers","n","getNumbers","App","useState","setCurrentPage","setPerPage","lastItemIndex","firstItemIndex","currentItem","slice","lastItemDesc","length","id","value","onChange","event","target","htmlFor","pageNumber","item","ReactDOM","render","document","getElementById"],"mappings":"oNASaA,EAA8B,SAAC,GAS1C,IAJK,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAc,GAEXC,EAAI,EAAGA,GAAKJ,EAAYI,GAAK,EACpCD,EAAYE,KAAKD,GAGnB,OACE,qBAAIE,UAAU,aAAd,UACE,oBACEA,UAAWC,IAAW,YAAa,CAAEC,SAA0B,IAAhBV,IADjD,SAGE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAK,QACL,gBAAc,OACdC,QAAS,WACHZ,EAAc,GAChBC,EAAaD,EAAc,IAPjC,oBAeDK,EAAYQ,KAAI,SAAAC,GAAI,OACnB,oBAEEN,UAAWC,IACT,YAAa,CAAEM,OAAQD,IAASd,IAHpC,SAME,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMX,EAAaa,IAJ9B,SAMGA,KAXEA,MAgBT,oBACEN,UAAWC,IACT,YAAa,CAAEC,SAAUV,IAAgBE,IAF7C,SAKE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAK,QACL,gBAAc,OACdC,QAAS,WACHZ,GAAeF,GACjBG,EAAaD,EAAc,IAPjC,wBC3DFgB,ECNC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQZ,KAAKa,GAGf,OAAOD,EDDKE,CAAW,EAAG,IACzBR,KAAI,SAAAO,GAAC,qBAAYA,MAEPE,EAAgB,WAC3B,MAAsCC,mBAAS,GAA/C,mBAAOvB,EAAP,KAAoBwB,EAApB,KACA,EAA8BD,mBAAS,GAAvC,mBAAOxB,EAAP,KAAgB0B,EAAhB,KAEMC,EAAgB1B,EAAcD,EAC9B4B,EAAiBD,EAAgB3B,EACjC6B,EAAcZ,EAAMa,MAAMF,EAAgBD,GAU1CI,EAAeJ,EAAgBV,EAAMe,OACvCL,EACAV,EAAMe,OAEV,OACE,sBAAKvB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWR,EADX,mBACiC2B,EAAiB,EADlD,cACyDG,EADzD,eAC4Ed,EAAMe,OADlF,OAIA,sBAAKvB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRwB,GAAG,kBACHxB,UAAU,eACVyB,MAAOlC,EACPmC,SA3BW,SAACC,GACpB,IAAQF,EAAUE,EAAMC,OAAhBH,MAERR,GAAYQ,GACZT,EAAe,IAkBT,UAOE,wBAAQS,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkB7B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEV,MAAOkB,EAAMe,OACbhC,QAASA,EACTC,YAAaA,EACbC,aAtCW,SAACqC,GAAD,OAAwBd,EAAec,MAyCpD,6BACGV,EAAYf,KAAI,SAAA0B,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YElEjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.66b50c6f.chunk.js","sourcesContent":["import classNames from 'classnames';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (pageNumber: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pageAmount = Math.ceil(total / perPage);\n  const pageNumbers = [];\n\n  for (let i = 1; i <= pageAmount; i += 1) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <ul className=\"pagination\">\n      <li\n        className={classNames('page-item', { disabled: currentPage === 1 })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled=\"true\"\n          onClick={() => {\n            if (currentPage > 1) {\n              onPageChange(currentPage - 1);\n            }\n          }}\n        >\n          «\n        </a>\n      </li>\n\n      {pageNumbers.map(page => (\n        <li\n          key={page}\n          className={classNames(\n            'page-item', { active: page === currentPage },\n          )}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li\n        className={classNames(\n          'page-item', { disabled: currentPage === pageAmount },\n        )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled=\"true\"\n          onClick={() => {\n            if (currentPage <= total) {\n              onPageChange(currentPage + 1);\n            }\n          }}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n\n  const lastItemIndex = currentPage * perPage;\n  const firstItemIndex = lastItemIndex - perPage;\n  const currentItem = items.slice(firstItemIndex, lastItemIndex);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setPerPage(+value);\n    setCurrentPage(1);\n  };\n\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n  const lastItemDesc = lastItemIndex < items.length\n    ? lastItemIndex\n    : items.length;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItemIndex + 1} - ${lastItemDesc} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handleChange}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={paginate}\n      />\n\n      <ul>\n        {currentItem.map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}